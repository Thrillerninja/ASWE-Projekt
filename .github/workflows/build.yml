name: Build
on:
  push:
    branches:
      - '*'  # Run on push to any branch
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  testing:
    name: Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Disable shallow clones for better analysis

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'


      # Install eSpeak
      - name: Install eSpeak
        run: sudo apt-get install espeak -y

      # Install Qt and Xvfb dependencies
      - name: Install Qt dependencies and Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-xinerama0 \
            libxcb1 \
            libx11-dev \
            libgl1-mesa-glx \
            libxi6 \
            libgdk-pixbuf2.0-0 \
            xvfb

      # Set environment variable for Qt plugins path
      - name: Set QT_QPA_PLATFORM_PLUGIN_PATH
        run: |
          echo "QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/qt5/plugins/platforms" >> $GITHUB_ENV

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-cov

      # Set environment variables for API keys
      - name: Set environment variables
        run: |
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> $GITHUB_ENV
          echo "FINANCE_API_KEY=${{ secrets.FINANCE_API_KEY }}" >> $GITHUB_ENV
          echo "NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}" >> $GITHUB_ENV
          echo "SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}" >> $GITHUB_ENV
          echo "SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}" >> $GITHUB_ENV

      # Start virtual display (Xvfb) for GUI-based tests
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1280x1024x24 &
          export DISPLAY=:99

      # Debug Xvfb
      - name: Debug Xvfb
        run: |
          ps aux | grep Xvfb
          echo $DISPLAY

      # Run tests without coverage
      - name: Run tests
        env:
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
          FINANCE_API_KEY: ${{ secrets.FINANCE_API_KEY }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          QT_QPA_PLATFORM: offscreen  # Force Qt to use offscreen rendering
        run: |
          python -m unittest discover -p "*_test.py"
        continue-on-error: false  # Fail the job if tests fail

      # Run tests with coverage and generate coverage.xml
      - name: Run tests with coverage
        env:
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
          FINANCE_API_KEY: ${{ secrets.FINANCE_API_KEY }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          PYTHONPATH: ${{ github.workspace }}
          QT_QPA_PLATFORM: offscreen  # Force Qt to use offscreen rendering
        run: |
          coverage run -m unittest discover -p "*_test.py"
          coverage xml -o coverage.xml

      # Upload coverage.xml as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Disable shallow clones for better analysis

      # Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up Python environment (ensure consistency with the testing job)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Ensure this matches the testing 
          
      # Step to install eSpeak
      - name: Install eSpeak
        run: sudo apt-get install espeak -y

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-cov

      # Download coverage.xml artifact
      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: .  # Download to the root directory

      # Verify coverage.xml
      - name: Verify coverage.xml
        run: |
          ls -la
          cat coverage.xml || echo "coverage.xml not found"
          pip install coverage pytest pytest-cov

      # Download coverage.xml artifact
      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: .  # Download to the root directory

      # Verify coverage.xml
      - name: Verify coverage.xml
        run: |
          ls -la
          cat coverage.xml || echo "coverage.xml not found"

      # SonarCloud Scan step
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v3.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for PR analysis
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.verbose=true
